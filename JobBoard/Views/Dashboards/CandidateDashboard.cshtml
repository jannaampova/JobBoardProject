
@model JobBoard.Models.ViewModels.CandidateDashboardViewModel
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jobby - Job Board</title>
    <link rel="stylesheet" href="~/css/candidate/candidateDash.css" asp-append-version="true" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        .sidebar {
            width: 187px !important;
        }

        .main-content {
            width: 92% !important;
            padding-left: 1.5rem !important;
        }
    </style>
</head>

<body style="font-family:'Poppins',sans-serif;">
    @await Html.PartialAsync("~/Views/sidebar.cshtml",Model)
    <div class="main-content">

        <h1 class="filters-title">
            Job Listings
        </h1>

            <form asp-action="Filter"  asp-controller="CandidateDashboard" method="get">
    <div class="filters-section">   

        <div class="search-box">
            <input type="text" class="search-input" name="SearchQuery" placeholder="Search jobs..." value="@Model.SearchQuery" />
            <button type="submit" class="search-button">Search</button>
        </div>

                <div class="selected-filters">
                    <!-- Selected filters will be added here dynamically -->
                </div>

        <div class="filters-grid">
            <!-- Industry Filter -->
            <div class="filter-group">
                <div class="filter-group-title">
                    Industry
                    <span class="clear-group">Clear</span>
                </div>
                <div class="filter-options">
                    @foreach (var industry in Model.Industries)
                    {
                        <div class="filter-option">
                            <input type="checkbox" id="industry-@industry.Id" name="SelectedIndustries" value="@industry.Id" 
                                @if (Model.SelectedIndustries?.Contains(industry.Id) == true) { <text>checked</text> } />
                            <label for="industry-@industry.Id">@industry.industry</label>
                        </div>
                    }
                </div>
            </div>

            <!-- Job Type Filter -->
            <div class="filter-group">
                <div class="filter-group-title">
                    Job Type
                    <span class="clear-group">Clear</span>
                </div>
                <div class="filter-options">
                    @foreach (var jobType in Model.JobTypes)
                    {
                        <div class="filter-option">
                            <input type="checkbox" id="type-@jobType.Id" name="SelectedJobTypes" value="@jobType.Id"
                                @if (Model.SelectedJobTypes?.Contains(jobType.Id) == true) { <text>checked</text> } />
                            <label for="type-@jobType.Id">@jobType.jobType</label>
                        </div>
                    }
                </div>
            </div>

            <!-- Location Filter -->
            <div class="filter-group">
                <div class="filter-group-title">
                    Location
                    <span class="clear-group">Clear</span>
                </div>
                <div class="filter-options">
                    @foreach (var town in Model.Cities)
                    {
                        <div class="filter-option">
                            <input type="checkbox" id="location-@town.Name" name="SelectedCities" value="@town.Id" 
                                @if (Model.SelectedCities?.Contains(town.Id) == true) { <text>checked</text> } />
                            <label for="location-@town.Name">@town.Name</label>
                        </div>
                    }
                </div>
            </div>

            <!-- Experience Level Filter -->
            <div class="filter-group">
                <div class="filter-group-title">
                            Experience Level
                            <span class="clear-group">Clear</span>
                        </div>
                        <div class="filter-options">
                            @foreach (var level in Model.Levels)
                            {
                                <div class="filter-option">
                                    <input type="checkbox" id="exp-@level" name="SelectedLevels" value="@level"
                                    @(Model.SelectedLevels?.Contains(level) == true ? "checked" : "") />
                                    <label for="exp-@level">@level</label>
                                </div>
                            }   
                        </div>
                    </div>
                </div>
            </div>
            </form>

        @{
            var listingsToShow = Model.FilteredJobs?.Any() == true ? Model.FilteredJobs : Model.AllListings;
        }   
        @if (listingsToShow == null || !listingsToShow.Any())
        {
            <div class="job-card">
                <div class="job-info">
                    <h2 class="job-title">No job listings available.</h2>
                </div>
            </div>
        }
        else
        {

            @foreach (var listing in listingsToShow)
            {
                <div class="job-card">

                    <div class="job-info">
                        <h2 class="job-title">@listing.title</h2>
                        <h3 class="company-name">@listing.company.companyName</h3>
                        <div class="job-details">
                            @*                            <span class="detail-item">🔥 @job.company.sal BGN</span>
 *@ <span class="detail-item">📍 @listing.town.Name</span>
                            <span class="detail-item">🔼 @listing.experienceLevel</span>
                            <span class="detail-item">💻 @listing.company.industry.industry</span>
                            <span class="detail-item">⬜ @listing.jobType.jobType</span>
                            <span class="detail-item">📅 @listing.datePosted.ToString("dd/MM/yyyy")</span>
                        </div>
                    </div>

                    <div class="job-right">
                        <div class="company-logo">
                        </div>


                        <div class="job-actions">
                            <form asp-controller="CandidateDashboard" asp-action="SaveListing" method="post">
                                <input type="hidden" name="listingId" value="@listing.Id"/>
                                <button type="submit" class="bookmark-btn">Save</button>
                            </form>
                            <a asp-controller="JobDetails" asp-action="Index" class="view-job-btn" asp-route-id="@listing.Id">View Details</a>
                        </div>
                    </div>
                </div>

            }
        }
    </div>
 



    <script>
        function toggleBookmark(button) {
            button.classList.toggle('active');
            button.textContent = button.classList.contains('active') ? 'Saved' : 'Save';
        }

        function saveListing(button) {
            const listingId = button.getAttribute('data-listing-id');
            const token = document.querySelector('#saveForm input[name="__RequestVerificationToken"]').value;

            fetch('/SavedListings/SaveListing', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ listingId: listingId })
            })
                .then(response => {
                    if (response.ok) {
                        toggleBookmark(button);  // ТУК го сменяме само ако е успешно
                    } else {
                        alert('Failed to save the listing.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while saving the listing.');
                });
        }


        function addSelectedFilter(label, count, id) {
            const selectedFilters = document.querySelector('.selected-filters');
            const filter = document.createElement('div');
            filter.className = 'selected-filter';
            filter.innerHTML = `
                ${label} ${count}
                <span class="remove" onclick="removeFilter('${id}')">×</span>
            `;
            selectedFilters.appendChild(filter);
        }

        function removeSelectedFilter(id) {
            const filter = document.querySelector(`.selected-filter span[onclick="removeFilter('${id}')"]`).parentElement;
            filter.remove();
        }

        function removeFilter(id) {
            const checkbox = document.getElementById(id);
            checkbox.checked = false;
            removeSelectedFilter(id);
        }

        document.querySelectorAll('.clear-group').forEach(button => {
            button.addEventListener('click', function() {
                const group = this.closest('.filter-group');
                group.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                    checkbox.checked = false;
                });
                const groupTitle = group.querySelector('.filter-group-title').textContent.trim();
                document.querySelectorAll('.selected-filter').forEach(filter => {
                    if (filter.textContent.includes(groupTitle)) {
                        filter.remove();
                    }
                });
            });
        });

        document.querySelectorAll('.filter-group').forEach(group => {
            const options = group.querySelectorAll('.filter-option');
            if (options.length > 4) {
                const showMore = document.createElement('div');
                showMore.className = 'show-more';
                showMore.textContent = 'Show more';
                group.appendChild(showMore);

                // Hide options beyond the first 4
                for (let i = 4; i < options.length; i++) {
                    options[i].style.display = 'none';
                }

                showMore.addEventListener('click', function() {
                    const isExpanded = this.classList.contains('expanded');
                    this.classList.toggle('expanded');

                    if (isExpanded) {
                        this.textContent = 'Show more';
                        for (let i = 4; i < options.length; i++) {
                            options[i].style.display = 'none';
                        }
                    } else {
                        this.textContent = 'Show less';
                        for (let i = 4; i < options.length; i++) {
                            options[i].style.display = 'flex';
                        }
                    }
                });
            }
        });
    </script>
</body>
</html>
